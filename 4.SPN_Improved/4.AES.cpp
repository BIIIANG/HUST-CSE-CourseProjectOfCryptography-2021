//#pragma warning(disable : 6031)
//#pragma warning(disable : 4996)
//#include <stdio.h>
//#include <stdlib.h>
//#include <stdint.h>
//#include <string.h>
//#include <time.h>
//
//#define Nr 10
//#define KEYBYTES (16)
//#define INPUTBYTES (1 << 24)
//#define BLOCKSIZE (16)
//
//#define BUFSIZE (1 << 19)
//
//uint8_t inBuf[BUFSIZE];
//uint8_t outBuf[BUFSIZE];
//
//// convert 4 uint8_t to a uint32_t
//#define UINT8_TTOUINT32_T(a, b) ((b) = (((uint32_t)((a)[0]) << 24) | ((uint32_t)((a)[1]) << 16) | \
//									((uint32_t)((a)[2]) << 8) | ((uint32_t)((a)[3]))));
//
//// G function in key expansion
//#define G(a) (((sBox[((a) >> 16) & 0xFF] << 24) & 0xFF000000) | ((sBox[((a) >> 8) & 0xFF] << 16) & 0x00FF0000) | \
//			  ((sBox[(a) & 0xFF] << 8) & 0x0000FF00) | ((sBox[((a) >> 24) & 0xFF]) & 0x000000FF))
//
//
//static const uint32_t RCon[10] = {
//	0x01000000UL, 0x02000000UL, 0x04000000UL, 0x08000000UL, 0x10000000UL,
//	0x20000000UL, 0x40000000UL, 0x80000000UL, 0x1B000000UL, 0x36000000UL
//};
//
//static const uint8_t sBox[0x100] = {
//	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
//	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
//	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
//	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
//	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
//	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
//	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
//	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
//	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
//	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
//	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
//	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
//	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
//	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
//	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
//	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
//};
//
//static const uint8_t mixMatrix[4][4] = {
//	{0x02, 0x03, 0x01, 0x01},
//	{0x01, 0x02, 0x03, 0x01},
//	{0x01, 0x01, 0x02, 0x03},
//	{0x03, 0x01, 0x01, 0x02}
//};
//
//static const uint8_t mul2[256] = {
//	0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
//	0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
//	0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
//	0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
//	0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
//	0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
//	0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
//	0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
//	0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
//	0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
//	0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
//	0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
//	0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
//	0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
//	0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
//	0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
//};
//
//static const uint8_t mul3[256] = {
//	0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
//	0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
//	0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
//	0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
//	0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
//	0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
//	0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
//	0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
//	0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
//	0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
//	0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
//	0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
//	0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
//	0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
//	0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
//	0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
//};
//
//// get expandedKey
//void keyExpansion(const uint8_t* key, uint32_t* expandedKey)
//{
//	if (!key || !expandedKey) { exit(-1); }
//
//	// get w[0]~w[3]
//	for (int i = 0; i < 4; i++) {
//		UINT8_TTOUINT32_T(key + 4 * i, expandedKey[i]);
//	}
//
//	// get w[4]~w[43]
//	for (int i = 0; i < Nr; i++) {
//		expandedKey[4 * i + 4] = expandedKey[4 * i] ^ G(expandedKey[4 * i + 3]) ^ RCon[i];
//		expandedKey[4 * i + 5] = expandedKey[4 * i + 1] ^ expandedKey[4 * i + 4];
//		expandedKey[4 * i + 6] = expandedKey[4 * i + 2] ^ expandedKey[4 * i + 5];
//		expandedKey[4 * i + 7] = expandedKey[4 * i + 3] ^ expandedKey[4 * i + 6];
//	}
//
//	return;
//}
//
//// convert 16 bytes plainText to 4*4 uint8_t state matrix
//void plainTextToStateMatrix(const uint8_t* plainText, uint8_t(*state)[4])
//{
//	if (!plainText || !state) { exit(-1); }
//	// plainText[16] => 
//	//  0   4   8  12
//	//  1   5   9  13
//	//  2   6  10  14
//	//  3   7  11  15
//	for (int i = 0; i < 4; i++) {
//		for (int j = 0; j < 4; j++) {
//			state[j][i] = *(plainText++);
//		}
//	}
//	return;
//}
//
//// convert 4*4 uint8_t state matrix to 16 bytes cipherText
//void stateMatrixToCipherText(const uint8_t(*state)[4], uint8_t* cipherText)
//{
//	if (!state || !cipherText) { exit(-1); }
//	for (int i = 0; i < 4; i++) {
//		for (int j = 0; j < 4; j++) {
//			*(cipherText++) = state[j][i];
//		}
//	}
//	return;
//}
//
//void addRoundKey(uint8_t(*state)[4], const uint32_t* key)
//{
//	if (!state || !key) { exit(-1); }
//	for (int i = 0; i < 4; i++) {
//		for (int j = 0; j < 4; j++) {
//			state[i][j] ^= ((key[j] >> (24 - 8 * i)) & 0xFF);
//		}
//	}
//	return;
//}
//
//void subBytes(uint8_t(*state)[4])
//{
//	if (!state) { exit(-1); }
//	for (int i = 0; i < 4; i++) {
//		for (int j = 0; j < 4; j++) {
//			state[i][j] = sBox[state[i][j]];
//		}
//	}
//	return;
//}
//
//void shiftRows(uint8_t(*state)[4])
//{
//	if (!state) { exit(-1); }
//	uint8_t tempRow[4];
//	for (int i = 0; i < 4; i++) {
//		memcpy(tempRow, state[i], 4 * sizeof(uint8_t));
//		for (int j = 0; j < 4; j++) {
//			state[i][j] = tempRow[(i + j) % 4];
//		}
//	}
//	return;
//}
//
//uint8_t filedMult(uint8_t x, uint8_t y)
//{
//	if (x == 0x01) {
//		return y;
//	}
//	else if (x == 0x02) {
//		if ((y & 0x80) == 0x00) {	// top bit is 0
//			return y << 1;
//		}
//		else {	// top bit is not 0
//			return (((y << 1) & 0xFF) ^ 0x1B);	// (^ 0x1B) equals divided by x^8+x^6+x^5+x+1 remainder
//		}
//		//return mul2[y];
//	}
//	else if (x == 0x03) {
//		return (filedMult(0x02, y) ^ y);
//		//return mul3[y];
//	}
//	else {
//		exit(-1);
//	}
//}
//
//void mixColumns(uint8_t(*state)[4])
//{
//	if (!state) { exit(-1); }
//	uint8_t tempState[4][4] = { 0 };
//	for (int i = 0; i < 4; i++) {
//		for (int j = 0; j < 4; j++) {
//			for (int k = 0; k < 4; k++) {
//				tempState[i][j] ^= filedMult(mixMatrix[i][k], state[k][j]);
//			}
//		}
//	}
//	memcpy(state, tempState, 4 * 4 * sizeof(uint8_t));
//	return;
//}
//
//void AESEncrypt(const uint32_t* expandedKey, const uint8_t* plainText, uint8_t* cipherText)
//{
//	if (!expandedKey || !plainText || !cipherText) { exit(-1); }
//
//	uint8_t state[4][4] = { 0 };
//	plainTextToStateMatrix(plainText, state);
//
//	addRoundKey(state, expandedKey);
//
//	for (int i = 1; i < Nr; i++) {
//		subBytes(state);
//		shiftRows(state);
//		mixColumns(state);
//		addRoundKey(state, expandedKey + 4 * i);
//	}
//
//	subBytes(state);
//	shiftRows(state);
//	addRoundKey(state, expandedKey + 4 * Nr);
//
//	stateMatrixToCipherText(state, cipherText);
//
//	return;
//}
//
//int main()
//{
//
//#ifdef _DEBUG
//	freopen("C:\\Users\\86131\\Desktop\\21秋密码学课设\\第四题样例\\1.in", "r", stdin);
//	freopen("C:\\Users\\86131\\Desktop\\21秋密码学课设\\第四题样例\\MY1.out", "w", stdout);
//#endif // _DEBUG
//
//	//uint8_t key[16] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
//	//uint8_t plainText[BLOCKSIZE] = { 0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34 };
//	
//	uint8_t key[16] = { 0 };
//	fread(key, 1, KEYBYTES, stdin);
//
//	uint32_t expandedKey[44] = { 0 };
//	keyExpansion(key, expandedKey);
//
//	//uint8_t plainText[BLOCKSIZE] = { 0 };
//	//uint8_t cipherText[BLOCKSIZE] = { 0 };
//	uint8_t* plainText = inBuf;
//	uint8_t* cipherText = outBuf;
//
//	// CBC mode
//	srand((unsigned int)time(NULL));
//	uint8_t IV[16] = { 0 };		// IV -> initial vector
//	for (int i = 0; i < 16; i++) {
//		IV[i] = rand() % 0x100;
//	}
//
//	for (int k = 0; k < (INPUTBYTES / BUFSIZE); k++) {
//		fread(inBuf, 1, BUFSIZE, stdin);
//		plainText = inBuf;
//		cipherText = outBuf;
//		for (int j = 0; j < 16; j++) {
//			plainText[j] ^= IV[j];
//		}
//		AESEncrypt(expandedKey, plainText, cipherText);
//		plainText += 16;
//		for (int i = 1; i < (BUFSIZE / BLOCKSIZE); i++) {
//			for (int j = 0; j < 16; j++) {
//				plainText[j] ^= cipherText[j];
//			}
//			cipherText += 16;
//			AESEncrypt(expandedKey, plainText, cipherText);
//			plainText += 16;
//		}
//		memcpy(IV, cipherText, 16 * sizeof(uint8_t));
//		fwrite(outBuf, 1, BUFSIZE, stdout);
//	}
//
//	return 0;
//}
//
//
