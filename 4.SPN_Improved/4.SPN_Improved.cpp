#pragma warning(disable : 6031)
#pragma warning(disable : 4996)
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <time.h>

#define Nr 4
#define KEYBYTES (16)
#define INPUTBYTES (1 << 24)
#define BLOCKSIZE (8)

// old permutation
//uint8_t permutation[0xFF] = {
//	1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 
//	2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 
//	3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63,
//	4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64
//};
// new permutation
//uint8_t permutation[0xFF] = {
//	1, 9, 17, 25, 33, 41, 49, 57, 8, 16, 24, 32, 40, 48, 56, 64,
//	3, 11, 19, 27, 35, 43, 51, 59, 6, 14, 22, 30, 38, 46, 54, 62,
//	5, 13, 21, 29, 37, 45, 53, 61, 4, 12, 20, 28, 32, 40, 48, 56,
//	7, 15, 23, 31, 39, 47, 55, 63, 2, 10, 18, 26, 34, 42, 50, 58
//};
uint8_t permutation[0xFF] = {
	1, 17, 33, 49, 2, 18, 34, 50, 3, 19, 35, 51, 4, 20, 36, 52, 
	5, 21, 37, 53, 6, 22, 38, 54, 15, 31, 47, 63, 16, 32, 48, 64, 
	9, 25, 41, 57, 10, 26, 42, 58, 11, 27, 43, 59, 12, 28, 44, 60, 
	13, 29, 45, 61, 14, 30, 46, 62, 7, 23, 39, 55, 8, 24, 40, 56,
};
//static const uint64_t substitution[256] = {
//	0xee, 0xe4, 0xed, 0xe1, 0xe2, 0xef, 0xeb, 0xe8, 0xe3, 0xea, 0xe6, 0xec, 0xe5, 0xe9, 0xe0, 0xe7,
//	0x4e, 0x44, 0x4d, 0x41, 0x42, 0x4f, 0x4b, 0x48, 0x43, 0x4a, 0x46, 0x4c, 0x45, 0x49, 0x40, 0x47,
//	0xde, 0xd4, 0xdd, 0xd1, 0xd2, 0xdf, 0xdb, 0xd8, 0xd3, 0xda, 0xd6, 0xdc, 0xd5, 0xd9, 0xd0, 0xd7,
//	0x1e, 0x14, 0x1d, 0x11, 0x12, 0x1f, 0x1b, 0x18, 0x13, 0x1a, 0x16, 0x1c, 0x15, 0x19, 0x10, 0x17,
//	0x2e, 0x24, 0x2d, 0x21, 0x22, 0x2f, 0x2b, 0x28, 0x23, 0x2a, 0x26, 0x2c, 0x25, 0x29, 0x20, 0x27,
//	0xfe, 0xf4, 0xfd, 0xf1, 0xf2, 0xff, 0xfb, 0xf8, 0xf3, 0xfa, 0xf6, 0xfc, 0xf5, 0xf9, 0xf0, 0xf7,
//	0xbe, 0xb4, 0xbd, 0xb1, 0xb2, 0xbf, 0xbb, 0xb8, 0xb3, 0xba, 0xb6, 0xbc, 0xb5, 0xb9, 0xb0, 0xb7,
//	0x8e, 0x84, 0x8d, 0x81, 0x82, 0x8f, 0x8b, 0x88, 0x83, 0x8a, 0x86, 0x8c, 0x85, 0x89, 0x80, 0x87,
//	0x3e, 0x34, 0x3d, 0x31, 0x32, 0x3f, 0x3b, 0x38, 0x33, 0x3a, 0x36, 0x3c, 0x35, 0x39, 0x30, 0x37,
//	0xae, 0xa4, 0xad, 0xa1, 0xa2, 0xaf, 0xab, 0xa8, 0xa3, 0xaa, 0xa6, 0xac, 0xa5, 0xa9, 0xa0, 0xa7,
//	0x6e, 0x64, 0x6d, 0x61, 0x62, 0x6f, 0x6b, 0x68, 0x63, 0x6a, 0x66, 0x6c, 0x65, 0x69, 0x60, 0x67,
//	0xce, 0xc4, 0xcd, 0xc1, 0xc2, 0xcf, 0xcb, 0xc8, 0xc3, 0xca, 0xc6, 0xcc, 0xc5, 0xc9, 0xc0, 0xc7,
//	0x5e, 0x54, 0x5d, 0x51, 0x52, 0x5f, 0x5b, 0x58, 0x53, 0x5a, 0x56, 0x5c, 0x55, 0x59, 0x50, 0x57,
//	0x9e, 0x94, 0x9d, 0x91, 0x92, 0x9f, 0x9b, 0x98, 0x93, 0x9a, 0x96, 0x9c, 0x95, 0x99, 0x90, 0x97,
//	0x0e, 0x04, 0x0d, 0x01, 0x02, 0x0f, 0x0b, 0x08, 0x03, 0x0a, 0x06, 0x0c, 0x05, 0x09, 0x00, 0x07,
//	0x7e, 0x74, 0x7d, 0x71, 0x72, 0x7f, 0x7b, 0x78, 0x73, 0x7a, 0x76, 0x7c, 0x75, 0x79, 0x70, 0x77
//};
static const uint64_t substitution[256] = {	
	0xee, 0xe4, 0xed, 0xe1, 0xe2, 0xef, 0xeb, 0xe8, 0x3e, 0x34, 0x3d, 0x31, 0x32, 0x3f, 0x3b, 0x38,
	0x4e, 0x44, 0xf3, 0x41, 0x42, 0x4f, 0x4b, 0x48, 0xae, 0xa4, 0xad, 0xa1, 0xa2, 0xaf, 0x55, 0xa8,
	0xde, 0xd4, 0xdd, 0xd1, 0xd2, 0xdf, 0xdb, 0xd8, 0x6e, 0x64, 0x6d, 0x61, 0x62, 0x6f, 0x9a, 0x68,
	0x1e, 0x14, 0x1d, 0x11, 0x12, 0x1f, 0x1b, 0x18, 0xce, 0xc4, 0xcd, 0xc1, 0xc2, 0xcf, 0xcb, 0xc8,
	0xc5, 0xc9, 0xc0, 0xc7, 0x22, 0xab, 0x2b, 0x28, 0x5e, 0x54, 0x6b, 0x51, 0x52, 0x5f, 0x5b, 0x58,
	0xfe, 0xf4, 0xfd, 0xf1, 0xf2, 0xff, 0xfb, 0xf8, 0x9e, 0x94, 0x9d, 0x91, 0x92, 0x9f, 0x9b, 0x98,
	0xbe, 0xb4, 0xbd, 0xb1, 0xb2, 0xbf, 0xbb, 0xb8, 0x0e, 0x04, 0x0d, 0x01, 0x02, 0x0f, 0x0b, 0x08,
	0x8e, 0x84, 0x8d, 0x81, 0x82, 0x8f, 0x5d, 0x88, 0x7e, 0x74, 0x7d, 0x71, 0x72, 0x7f, 0x7b, 0x78,
	0xe3, 0xea, 0xe6, 0xec, 0xe5, 0xe9, 0xe0, 0xe7, 0x33, 0x3a, 0x36, 0x3c, 0x35, 0x39, 0x30, 0x37,
	0x43, 0x4a, 0x46, 0x4c, 0x45, 0x49, 0x40, 0x47, 0xa3, 0xaa, 0xa6, 0xac, 0xa5, 0xa9, 0xa0, 0xa7,
	0xd3, 0xda, 0x2f, 0xdc, 0x4d, 0xd9, 0xd0, 0xd7, 0x63, 0x6a, 0x66, 0x6c, 0x65, 0x69, 0x60, 0x67,
	0x13, 0x1a, 0x16, 0x1c, 0x15, 0x19, 0x10, 0x17, 0xc3, 0xca, 0xc6, 0xcc, 0x2e, 0x24, 0x2d, 0x21,
	0x23, 0x2a, 0x26, 0x2c, 0x25, 0x29, 0x20, 0x27, 0x53, 0x5a, 0x56, 0x5c, 0xf9, 0x59, 0x50, 0x57,
	0xd5, 0xfa, 0xf6, 0xfc, 0xf5, 0xd6, 0xf0, 0xf7, 0x93, 0x8b, 0x96, 0x9c, 0x95, 0x99, 0x90, 0x97,
	0xb3, 0xba, 0xb6, 0xbc, 0xb5, 0xb9, 0xb0, 0xb7, 0x03, 0x0a, 0x06, 0x0c, 0x05, 0x09, 0x00, 0x07,
	0x83, 0x8a, 0x86, 0x8c, 0x85, 0x89, 0x80, 0x87, 0x73, 0x7a, 0x76, 0x7c, 0x75, 0x79, 0x70, 0x77
};


uint64_t SPN_encrypt(uint64_t* roundKey, uint64_t plainText)
{
	// encrypt
	for (int i = 0; i < Nr; i++) {
		// xor round key
		plainText ^= roundKey[i];

		// substitution
		plainText = (substitution[(plainText >> 56) & 0xFF] << 56) |
			(substitution[(plainText >> 48) & 0xFF] << 48) |
			(substitution[(plainText >> 40) & 0xFF] << 40) |
			(substitution[(plainText >> 32) & 0xFF] << 32) |
			(substitution[(plainText >> 24) & 0xFF] << 24) |
			(substitution[(plainText >> 16) & 0xFF] << 16) |
			(substitution[(plainText >> 8) & 0xFF] << 8) |
			(substitution[(plainText) & 0xFF]);

		// permutation
		if (i < Nr - 1) {
			uint64_t temp = 0;
			for (int j = 0; j < 0x40; j++) {
				temp |= ((plainText >> (64 - permutation[j])) & 0x1) << (63 - j);
			}
			plainText = temp;
		}
	}

	// xor round key
	uint64_t cipherText = plainText ^ roundKey[Nr];

	return cipherText;
}

int main()
{

#ifdef _DEBUG
	freopen("..\\Examples\\第四题样例\\1.in", "r", stdin);
	//freopen("..\\Examples\\第四题样例\\MY1.out", "w", stdout);
#endif // _DEBUG
	
	uint8_t key[16] = { 0 };
	fread(key, 1, KEYBYTES, stdin);

	// get round key
	uint64_t roundKey[5] = { 0 };
	roundKey[0] = (((uint64_t)key[0]) << 56) | (((uint64_t)key[1]) << 48) | (((uint64_t)key[2]) << 40) | (((uint64_t)key[3]) << 32) |
		(((uint64_t)key[4]) << 24) | (((uint64_t)key[5]) << 16) | (((uint64_t)key[6]) << 8) | (((uint64_t)key[7]));
	roundKey[4] = (((uint64_t)key[8]) << 56) | (((uint64_t)key[9]) << 48) | (((uint64_t)key[10]) << 40) | (((uint64_t)key[11]) << 32) |
		(((uint64_t)key[12]) << 24) | (((uint64_t)key[13]) << 16) | (((uint64_t)key[14]) << 8) | (((uint64_t)key[15]));
	roundKey[1] = ((roundKey[0] << 16) & 0xFFFFFFFFFFFF0000) | ((roundKey[4] >> 48) & 0x000000000000FFFF);
	roundKey[2] = ((roundKey[0] << 32) & 0xFFFFFFFF00000000) | ((roundKey[4] >> 32) & 0x00000000FFFFFFFF);
	roundKey[3] = ((roundKey[0] << 48) & 0xFFFF000000000000) | ((roundKey[4] >> 16) & 0x0000FFFFFFFFFFFF);

	uint64_t plainText = 0;
	uint64_t cipherText = 0;

	// CBC mode
	uint64_t IV = 0x2ab1c3272de1f9a7;
	cipherText = IV;
	for (int i = 0; i < (INPUTBYTES / BLOCKSIZE); i++) {
		fread(&plainText, BLOCKSIZE, 1, stdin);
		plainText ^= cipherText;
		cipherText = SPN_encrypt(roundKey, plainText);
		fwrite(&cipherText, BLOCKSIZE, 1, stdout);
	}


	return 0;
}